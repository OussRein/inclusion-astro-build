---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import HeaderServices from '~/components/widgets/HeaderServices.astro';

import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash } from '~/utils/permalinks';
import type { CallToAction } from '~/types';
import LanguagePicker from './LanguagePicker.astro';
import { getLangFromUrl } from '~/i18n/utils';
import { useTranslatedPath, getRouteFromUrl } from '~/i18n/utils';
import { languages, routes } from '~/i18n/ui';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface ActionLink extends CallToAction {}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  position = 'center',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;

const lang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(lang);

const route = getRouteFromUrl(Astro.url);

function translatePathOfLanguage(path: string, l: string) {
  const pathName = path.replaceAll('/', '');
  const hasTranslation = 'fr' !== l && routes[l] !== undefined && routes[l][pathName] !== undefined;
  const translatedPath = hasTranslation ? '/' + routes[l][pathName] : path;
  if (path === '/') return l === 'fr' ? path : `/${l}`;
  return l === 'fr' ? translatedPath : `/${l}${translatedPath}`;
}
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 flex-none mx-auto w-full border-gray-50/0 transition-[opacity] ease-in-out',
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div
    class:list={[
      'relative text-default md:px-6 mx-auto w-full bg-[#F38300]',
      {
        'md:flex md:justify-between': position !== 'center',
      },
      {
        'md:grid md:grid-cols-2 md:items-center': position === 'center',
      },
      {
        'max-w-7xl': !isFullWidth,
      },
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex px-2 justify-between']}>
      <a class="flex items-center" href={translatePath(getHomePermalink())}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden text-black">
        <ToggleMenu />
      </div>
    </div>

    <nav id="mobile-menu" class="bg-[#F38300] border-gray-200 md:hidden text-black" aria-label="Mobile navigation">
      <div class="h-full px-3 py-4 overflow-y-auto bg-gray-50 dark:bg-gray-800">
        <ul class="space-y-2 font-medium">
          {
            links.map(({ text, href, links }) =>
              text === 'Services' ? (
                <li>
                  <button
                    type="button"
                    id="services"
                    class="flex items-center w-full p-2 text-base text-gray-900 transition duration-75 rounded-lg group hover:bg-gray-100"
                  >
                    <span class="flex-1 ms-3 text-left rtl:text-right whitespace-nowrap">Services</span>
                    <svg
                      class="w-3 h-3"
                      aria-hidden="true"
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 10 6"
                    >
                      <path
                        stroke="currentColor"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="m1 1 4 4 4-4"
                      />
                    </svg>
                  </button>
                  <ul id="dropdown-example" class="hidden py-2 space-y-2">
                    {links?.map((activity, index) => (
                      <li>
                        <button
                          type="button"
                          class="first-menu-level flex items-center w-full p-2 text-base text-gray-900 transition duration-75 rounded-lg group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700"
                        >
                          <span class="flex-1 ms-3 text-left rtl:text-right whitespace-nowrap">{activity.title}</span>
                          <svg
                            class="w-3 h-3"
                            aria-hidden="true"
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 10 6"
                          >
                            <path
                              stroke="currentColor"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="m1 1 4 4 4-4"
                            />
                          </svg>
                        </button>
                        <ul class="dropdown-example2 hidden py-2 space-y-2" data-index={index}>
                          {activity.services.map((service) => (
                            <li>
                              <a
                                href="#"
                                class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700"
                              >
                                {service.title}{' '}
                              </a>
                            </li>
                          ))}
                        </ul>
                      </li>
                    ))}
                  </ul>
                </li>
              ) : links?.length ? (
                links.map(({ text: text2, href: href2 }) => (
                  <li>
                    <a
                      href={translatePath(href2!)}
                      class="flex items-center p-2 text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 group"
                    >
                      <svg
                        class="flex-shrink-0 w-5 h-5 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
                        aria-hidden="true"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="currentColor"
                        viewBox="0 0 18 18"
                      >
                        <path d="M6.143 0H1.857A1.857 1.857 0 0 0 0 1.857v4.286C0 7.169.831 8 1.857 8h4.286A1.857 1.857 0 0 0 8 6.143V1.857A1.857 1.857 0 0 0 6.143 0Zm10 0h-4.286A1.857 1.857 0 0 0 10 1.857v4.286C10 7.169 10.831 8 11.857 8h4.286A1.857 1.857 0 0 0 18 6.143V1.857A1.857 1.857 0 0 0 16.143 0Zm-10 10H1.857A1.857 1.857 0 0 0 0 11.857v4.286C0 17.169.831 18 1.857 18h4.286A1.857 1.857 0 0 0 8 16.143v-4.286A1.857 1.857 0 0 0 6.143 10Zm10 0h-4.286A1.857 1.857 0 0 0 10 11.857v4.286c0 1.026.831 1.857 1.857 1.857h4.286A1.857 1.857 0 0 0 18 16.143v-4.286A1.857 1.857 0 0 0 16.143 10Z" />
                      </svg>
                      <span class="flex-1 ms-3 whitespace-nowrap">{text2}</span>
                      <span class="inline-flex items-center justify-center px-2 ms-3 text-sm font-medium text-gray-800 bg-gray-100 rounded-full dark:bg-gray-700 dark:text-gray-300">
                        Pro
                      </span>
                    </a>
                  </li>
                ))
              ) : (
                <a
                  class:list={[
                    'hover:text-link px-4 py-3 flex items-center',
                    { 'aw-link-active': href === currentPath },
                  ]}
                  href={href}
                >
                  {text}
                </a>
              )
            )
          }

          <li>
            <>
              <button
                type="button"
                class="first-menu-level flex items-center w-full p-2 text-base text-gray-900 transition duration-75 rounded-lg group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700"
              >
                <span class="flex-1 ms-3 text-left rtl:text-right whitespace-nowrap"
                  ><svg
                    class="w-4 h-4 rtl:flip-180"
                    fill="black"
                    viewBox="0 0 512 512"
                    xmlns="http://www.w3.org/2000/svg"
                    ><title>ionicons-v5-l</title><line
                      x1="48"
                      y1="112"
                      x2="336"
                      y2="112"
                      style="fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px"
                    ></line><line
                      x1="192"
                      y1="64"
                      x2="192"
                      y2="112"
                      style="fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px"
                    ></line><polyline
                      points="272 448 368 224 464 448"
                      style="fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px"
                    ></polyline><line
                      x1="301.5"
                      y1="384"
                      x2="434.5"
                      y2="384"
                      style="fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px"
                    ></line><path
                      d="M281.3,112S257,206,199,277,80,384,80,384"
                      style="fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px"
                    ></path><path
                      d="M256,336s-35-27-72-75-56-85-56-85"
                      style="fill:none;stroke:#000;stroke-linecap:round;stroke-linejoin:round;stroke-width:32px"
                    ></path></svg
                  >Languages</span
                >
                <svg
                  class="w-3 h-3"
                  aria-hidden="true"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 10 6"
                >
                  <path
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="m1 1 4 4 4-4"></path>
                </svg>
              </button>
              <ul class="dropdown-example2 hidden py-2 space-y-2">
                {
                  Object.entries(languages).map(([lang, label]) => (
                    <li>
                      <a
                        href={translatePathOfLanguage(`/${route ? route : ''}`, lang)}
                        class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700"
                      >
                        {label}
                      </a>
                    </li>
                  ))
                }
              </ul>
            </>
          </li>
        </ul>
      </div>
    </nav>

    <nav class="items-right w-full md:w-auto hidden md:flex md:mx-5 text-default text-white overflow-y-auto overflow-x-hidden md:overflow-y-visible md:overflow-x-auto md:justify-self-end"
      aria-label="Main navigation">
      <ul class="flex flex-col md:flex-row md:self-center w-full md:w-auto text-xl md:text-[0.9375rem] tracking-[0.01rem] font-medium md:justify-center">
        {
          links.map(({ text, href, links }) =>
            text === 'Services' ? (
              <HeaderServices services={links} />
            ) : (
              <li class={links?.length ? 'dropdown' : ''}>
                {links?.length ? (
                  <>
                    <button type="button" class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center">
                      {text}{' '}
                      <Icon
                        name="tabler:chevron-down"
                        class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline"
                      />
                    </button>
                    <ul class="dropdown-menu md:backdrop-blur-md  rounded md:absolute pl-4 md:pl-0 md:hidden font-medium md:bg-orange-400 md:min-w-[200px] drop-shadow-xl">
                      {links.map(({ text: text2, href: href2 }) => (
                        <li>
                          <a
                            class:list={[
                              'first:rounded-t last:rounded-b md:hover:bg-orange-300 hover:text-link py-2 px-5 block whitespace-no-wrap',
                              { 'aw-link-active': href2 === currentPath },
                            ]}
                            href={translatePath(href2!)}
                          >
                            {text2}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </>
                ) : (
                  <a
                    class:list={[
                      'hover:text-link dark:hover:text-white px-4 py-3 flex items-center',
                      { 'aw-link-active': href === currentPath },
                    ]}
                    href={href}
                  >
                    {text}
                  </a>
                )}
              </li>
            )
          )
        }

        <LanguagePicker />

        {/* Mega Menu –––––––––––––––––––––––––––––––––––––––––––––––––– */}
      </ul>
    </nav>
  </div>
</header>

<script>
  document.addEventListener('astro:page-load', () => {
    const servicesButton = document.getElementById('services');
    const firstMenuButtons = document.querySelectorAll('.first-menu-level');
    const servicesDropdown = document.getElementById('dropdown-example');

    firstMenuButtons.forEach((button) => {
      button.addEventListener('click', function (event) {
        event.stopPropagation();
        const dropdown = button.nextElementSibling;
        if (dropdown) {
          dropdown.classList.toggle('hidden');
        }
      });
    });

    servicesButton?.addEventListener('click', function (event) {
      event.stopPropagation();
      servicesDropdown?.classList.toggle('hidden');
    });

    document.querySelector('#mobile-menu')?.addEventListener('click', function (event) {
      event.stopPropagation();
    });
  });
</script>
